# Generated by Django 4.2.7 on 2025-10-14 15:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+79991234567'. Допускается до 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Номер телефона')),
                ('is_phone_verified', models.BooleanField(default=False, verbose_name='Телефон подтвержден')),
                ('phone_verification_code', models.CharField(blank=True, max_length=6, null=True)),
                ('phone_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('full_name', models.CharField(blank=True, max_length=255, verbose_name='Полное имя')),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Последняя активность')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SMSVerification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=17, verbose_name='Номер телефона')),
                ('code', models.CharField(max_length=6, verbose_name='Код подтверждения')),
                ('session_id', models.CharField(max_length=100, verbose_name='ID сессии')),
                ('is_used', models.BooleanField(default=False, verbose_name='Использован')),
                ('expires_at', models.DateTimeField(verbose_name='Истекает в')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
            ],
            options={
                'verbose_name': 'SMS верификация',
                'verbose_name_plural': 'SMS верификации',
                'indexes': [models.Index(fields=['phone', 'is_used'], name='users_smsve_phone_8a5c6d_idx'), models.Index(fields=['expires_at'], name='users_smsve_expires_530ac1_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_id', models.CharField(max_length=255, verbose_name='ID устройства')),
                ('device_info', models.JSONField(blank=True, default=dict, verbose_name='Информация об устройстве')),
                ('fcm_token', models.CharField(blank=True, max_length=255, verbose_name='FCM токен')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('last_used', models.DateTimeField(auto_now=True, verbose_name='Последнее использование')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создана')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сессия пользователя',
                'verbose_name_plural': 'Сессии пользователей',
                'indexes': [models.Index(fields=['user', 'is_active'], name='users_users_user_id_3887fe_idx'), models.Index(fields=['last_used'], name='users_users_last_us_10114d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['phone'], name='users_custo_phone_ad7713_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_phone_verified'], name='users_custo_is_phon_514846_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['created_at'], name='users_custo_created_f4b145_idx'),
        ),
    ]
