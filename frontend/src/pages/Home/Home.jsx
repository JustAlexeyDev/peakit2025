// src/components/Home.js
import React, { useState, useEffect } from 'react';
import HeaderSection from './components/HeaderSection/HeaderSection';
import PrimaryAction from './components/PrimaryAction/PrimaryAction';
import NextPointCard from './components/NextPointCard/NextPointCard';
import TrailProgress from './components/TrailProgress/TrailProgress';
import QuickActions from './components/QuickActions/QuickActions';
import InfoCard from './components/InfoCard/InfoCard';
import './Home.css';
import { useNavigate } from 'react-router';
import { useRoute } from '../../modules/hooks/useRoute.js';

const Home = () => {
    const navigate = useNavigate();
    const { 
        routeProgress, 
        nextPoint, 
        loading, 
        error,
        startRoute,
        markPointCompleted,
        resetRoute,
        refreshData
    } = useRoute();

    const [isStartingRoute, setIsStartingRoute] = useState(false);

    const quickActions = [
        { icon: '‚õΩ', label: '–ê–ó–°', onClick: () => navigate('/Map?filter=gas') },
        { icon: 'üç¥', label: '–ï–¥–∞', onClick: () => navigate('/Map?filter=food') },
        { icon: 'üèûÔ∏è', label: '–°–º–æ—Ç—Ä–æ–≤—ã–µ', onClick: () => navigate('/Map?filter=viewpoint') },
        { icon: 'üìã', label: '–ß–µ–∫-–ª–∏—Å—Ç', onClick: () => console.log('Open checklist') }
    ];

    const handleStartRoute = async () => {
        try {
            setIsStartingRoute(true);
            await startRoute();
            navigate('/Map');
        } catch (error) {
            console.error('Error starting route:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞');
        } finally {
            setIsStartingRoute(false);
        }
    };

    const handleNavigateToMap = (point) => {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–∞—Ä—Ç—É –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —Ç–æ—á–∫–µ
        navigate('/Map', { 
            state: { 
                centerOnPoint: point.coordinates,
                zoom: 15
            }
        });
    };

    const handleMarkCompleted = async (pointId) => {
        try {
            await markPointCompleted(pointId);
            alert('–¢–æ—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è!');
        } catch (error) {
            console.error('Error marking point completed:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ç–æ—á–∫–∏');
        }
    };

    const handleResetProgress = async () => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')) {
            try {
                await resetRoute();
                alert('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!');
            } catch (error) {
                console.error('Error resetting route:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
            }
        }
    };

    const handleOpenRules = () => {
        console.log('Open park rules');
    };

    if (loading) {
        return (
            <div className="home">
                <HeaderSection/>
                <div className="home__loading">
                    <div className="home__loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="home">
            <HeaderSection/>

            {error && (
                <div className="home__error">
                    <p>‚ö†Ô∏è {error}</p>
                    <button onClick={refreshData}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            )}

            <NextPointCard
                nextPoint={nextPoint}
                onNavigateToMap={handleNavigateToMap}
                onMarkCompleted={handleMarkCompleted}
            />

            <TrailProgress
                current={routeProgress.completedPoints.length}
                total={routeProgress.totalPoints}
                onViewDetails={() => navigate('/Map')}
                onResetProgress={handleResetProgress}
            />

            <QuickActions
                actions={quickActions}
            />

            <InfoCard
                text="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–∞—Ä–∫–∞"
                onClick={handleOpenRules}
            />

            <PrimaryAction
                text={isStartingRoute ? "–ó–∞–ø—É—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞..." : "–ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"}
                onClick={handleStartRoute}
                disabled={isStartingRoute}
            />
        </div>
    );
};

export default Home;